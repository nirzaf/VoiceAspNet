@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Configuration
@using System.Text.RegularExpressions
@implements IAsyncDisposable
@inject IConfiguration configuration
@inject IJSRuntime js
@inject ILogger<Dialer> logger
@inject HttpClient httpClient

<div class="dialer 
    @(isCallIncoming || isCallOngoing ? "dialer--show-top" : "") 
    @(isCallIncoming ? "dialer--incoming-call" : "") 
    @(showDialer ? "dialer--show" : "dialer--hide")">
    <button
        class="show-hide-button btn @(showDialer ? "btn-secondary" : "btn-success")"
        @onclick="@(() => showDialer = !showDialer)">
        @(showDialer ? "hide" : "show") phone <i class="bi bi-telephone-fill"></i>
    </button>
    <p class="text-center text-light">@(message != "" ? message : "Standing by")</p>
    <div class="input-group w-100 mb-3">
        <input
            @bind="dialNumber"
            @bind:event="oninput"
            disabled="@(!isTwilioDeviceRegistered || isCallOngoing || isCallIncoming)"
            class="form-control text-center"
            placeholder="Phone number">
        <div class="input-group-append">
            <button
                @onclick="RemoveKey"
                disabled="@(!isTwilioDeviceRegistered || isCallOngoing || isCallIncoming || dialNumber.Length == 0)"
                class="btn btn-outline-secondary"
                type="button">
                <i class="bi bi-backspace-fill"></i>
            </button>
        </div>
    </div>
    <div class="dial-pad clearfix w-100 mb-3">
        @foreach (var dialKey in dialKeys)
        {
            <button
                @onclick="() => PressKey(dialKey)" class="btn btn-dark" type="button"
                disabled="@(!isTwilioDeviceRegistered)">
                @dialKey
            </button>
        }
    </div>
    <div class="btn-group w-100">
        @if (isCallIncoming)
        {
            <button
                @onclick="RejectCall"
                type="button"
                class="btn btn-danger w-50">
                Reject
            </button>
            <button
                @onclick="AcceptCall"
                type="button"
                class="btn btn-success w-50">
                Accept
            </button>
        }
        else
        {
            <button
                @onclick="EndCall"
                disabled="@(!isTwilioDeviceRegistered || !isCallOngoing)"
                type="button"
                class="btn btn-danger w-50">
                Hang up
            </button>
            <button
                @onclick="StartCall"
                disabled="@(!isTwilioDeviceRegistered || isCallOngoing || dialNumber.Length == 0)"
                type="button"
                class="btn btn-success w-50">
                Call
            </button>
        }
    </div>
</div>

@code{
    private static readonly string dialKeys = "123456789*0#";
    private DotNetObjectReference<Dialer> dotNetObjectReference;
    private IJSObjectReference jsDialer;
    private bool showDialer = false;
    private string message = "";
    private string dialNumber = "";
    private bool isTwilioDeviceRegistered = false;
    private bool isCallOngoing = false;
    private bool isCallIncoming = false;
    
    [Parameter] public EventCallback<string> OnCallRequested { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        dotNetObjectReference = DotNetObjectReference.Create(this);
        var dialerModule = await js.InvokeAsync<IJSObjectReference>("import", "./js/dialer.js");
        jsDialer = await dialerModule.InvokeAsync<IJSObjectReference>("createDialer");
        await jsDialer.InvokeVoidAsync("setDotNetObjectReference", dotNetObjectReference);

        var jwtToken = await GetTwilioAuthenticationTokenAsync();
        await jsDialer.InvokeVoidAsync("setupTwilioDevice", jwtToken);
    }

    private async Task<string> GetTwilioAuthenticationTokenAsync()
    {
        var httpResponseMessage = await httpClient.PostAsync("/api/token", null);
        var jwtToken = await httpResponseMessage.Content.ReadAsStringAsync();
        return jwtToken;
    }

    private void PressKey(char key) => dialNumber += key;

    private void RemoveKey() => dialNumber = dialNumber.Remove(dialNumber.Length - 1);

    private async Task StartCall()
    {
        isCallOngoing = true;
        isCallIncoming = false;
        message = $"Calling {dialNumber}";
        await jsDialer.InvokeVoidAsync("startCall", dialNumber);
        StateHasChanged();
    }

    private async Task EndCall()
    {
        await jsDialer.InvokeVoidAsync("endCall");
    }

    private async Task AcceptCall()
    {
        await jsDialer.InvokeVoidAsync("acceptCall");
    }

    private async Task RejectCall()
    {
        isCallIncoming = false;
        message = "";
        await jsDialer.InvokeVoidAsync("rejectCall");
    }

    [JSInvokable]
    public void OnTwilioDeviceRegistered()
    {
        isTwilioDeviceRegistered = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnTwilioDeviceIncomingConnection(string phoneNumber)
    {
        isCallIncoming = true;
        message = $"{phoneNumber} is calling you";
        StateHasChanged();
    }

    [JSInvokable]
    public void OnTwilioCallAccepted(string phoneNumber)
    {
        isCallOngoing = true;
        isCallIncoming = false;
        message = $"Calling {phoneNumber}";
        StateHasChanged();
    }

    [JSInvokable]
    public void OnTwilioDeviceError(string error)
    {
        message = error;
        logger.LogError(error);
        StateHasChanged();
    }

    [JSInvokable]
    public void OnTwilioCallCancelled() => Reset();

    [JSInvokable]
    public void OnTwilioCallDisconnected() => Reset();

    [JSInvokable]
    public void OnTwilioCallRejected() => Reset();

    private void Reset()
    {
        isCallOngoing = false;
        isCallIncoming = false;
        message = "";
        StateHasChanged();
    }

    [JSInvokable]
    public void OnTwilioCallError(string error)
    {
        message = error;
        logger.LogError(error);
        StateHasChanged();
    }
    
    public void RequestCall(string phoneNumber)
    {
        dialNumber = phoneNumber;
        showDialer = true;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (jsDialer != null)
        {
            await jsDialer.InvokeVoidAsync("destroy");
        }
        dotNetObjectReference?.Dispose();
    }
}